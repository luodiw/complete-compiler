searchState.loadedDescShard("term", 0, "Terminal formatting library.\nTerminal attributes for use with term.attr().\nConvenience attribute to set the background color\nBlink mode\nBold (or possibly bright) mode\nIndicates that the terminal does not support displaying …\nIndicates that the cursor could not be moved to the …\nDim mode, also called faint or half-bright. Often not …\nContains the error value\nAn error arising from interacting with the terminal.\nConvenience attribute to set the foreground color\nIndicates an error from any underlying IO\nItalics mode. Often not supported\nIndicates that the terminal does not support the requested …\nContains the success value\nThe terminal’s output writer type.\nIndicates an error expanding a parameterized string from …\nThe canonical <code>Result</code> type using this crate’s Error type.\nReverse mode, inverts the foreground and background colors\nSecure mode, also called invis mode. Hides the printed text\nStandout mode. Often implemented as Reverse, sometimes …\nAlias for stderr terminals.\nAlias for stdout terminals.\nIndicates that the <code>TERM</code> environment variable was unset, …\nA terminal with similar capabilities to an ANSI Terminal …\nIndicates that we were unable to find a terminfo entry for …\nIndicates an error during terminfo parsing\nUnderline mode\nSets the given terminal attribute, if supported.  Returns …\nSets the background color to the given color.\nMoves the cursor to the left edge of the current line.\nTerminal color definitions\nMoves the cursor up one line.\nDeletes the text from the cursor location to the end of …\nSets the foreground color to the given color.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to the stream inside\nGets an immutable reference to the stream inside\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the contained stream, destroying the <code>Terminal</code>\nResets all terminal attributes and colors to their …\nReturn a Terminal wrapping stderr, or None if a terminal …\nReturn a Terminal wrapping stdout, or None if a terminal …\nReturns whether the given terminal attribute is supported.\nReturns true if color is fully supported.\nReturns true if reset is supported.\nTerminfo database interface.\nNumber for a terminal color\nThe “magic” number at the start of the file was wrong.\nAn error from parsing a terminfo entry\nThe length of some field was not &gt;= -1.\nThe names table was missing a trailing null terminator.\nThe names in the file were not valid UTF-8.\nThe names section of the file was empty\nThe strings table was missing a trailing null terminator.\nA parsed terminfo database entry.\nA Terminal that knows how many colors it supports, with a …\nMore boolean parameters are present in the file than this …\nMore number parameters are present in the file than this …\nMore string parameters are present in the file than this …\nRetrieve a capability <code>cmd</code> and expand it with <code>params</code>, …\nMap of capability name to boolean value\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>TermInfo</code> based on current environment.\nCreate a <code>TermInfo</code> for the named terminal.\nParse the given <code>TermInfo</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNames for the terminal\nCreate a new TerminfoTerminal for the current environment …\nCreate a new TerminfoTerminal with the given TermInfo and …\nMap of capability name to numeric value\nParameterized string expansion\n<code>TermInfo</code> format parsing. ncurses-compatible compiled …\nWrite the reset string to <code>out</code>.\nncurses-compatible database discovery\nMap of capability name to raw (unexpanded) string\nAn error from interpreting a parameterized string.\nA format precision constant was too large (overflowed a …\nA format width constant was too large (overflowed a usize)\nAn integer constant was too large (overflowed an i32)\nAn invalid parameter index was used.\nAn invalid variable name was used.\nA malformed character constant was used.\nA malformed integer constant was used.\nTypes of parameters a capability can use\nData was requested from the stack, but the stack didn’t …\nThe type of the element(s) on top of the stack did not …\nAn unrecognized format option was used.\nContainer for static and dynamic variable arrays\nExpand a parameterized capability\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a new zero-initialized Variables\nncurses-compatible compiled terminfo format parsing …\nParse a compiled terminfo entry, using long capability …\nReturn path to database entry for <code>term</code>")