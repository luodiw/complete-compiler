searchState.loadedDescShard("common", 0, "Common functionality and constants for <code>SafeLLVM</code>.\nConstants used throughout <code>SafeLLVM</code>. Common constants used …\nUtilities for handling C strings within Rust. For more …\nProvides I/O functionalities. This module includes a …\nPointer utilities that manage safe interactions with LLVM …\nTarget configuration utilities. Handles configuration …\nDefault name for the entry basic block in a function.\nDefault name for functions.\nDefault name for modules.\nConverts a Rust <code>Path</code> object to a C-style string (<code>CString</code>).\nWrites an LLVM module to a file.\nWrites the LLVM module to a string.\nRepresents a basic block, which is a straight-line code …\nA basic block is a sequence of instructions that execute …\nProvides a mechanism to construct an LLVM IR. Builders are …\nUsed for building LLVM IR. It maintains a current position …\nEncapsulates an LLVM context, a mechanism for holding the …\nRefers to an LLVM context, which is an environment in …\nRepresents an LLVM execution engine, which is capable of …\nManages the execution of compiled LLVM code. It is …\nEnum to represent various LLVM references for type …\nRepresents types of LLVM references for runtime conversion.\nRepresents an LLVM module, which is a collection of …\nRepresents an LLVM module, which acts as a container for …\nThread-safe pointer type for managing raw C pointers in a …\nRepresents a type in LLVM, which could be a primitive type …\nRepresents a data type in LLVM. Types are metadata that …\nRepresents a value in the LLVM system, which could be a …\nEncompasses any value computed or used by a program. In …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>SafeLLVMPointer</code> by taking an <code>LLVMRef</code> and …\nProvides read-only access to the pointed-to value.\nProvides write access to the pointed-to value.\nConfiguration for AArch64 architecture, commonly used in …\nConfiguration for AMDGPU architecture.\nConfigurator for ARM architecture.\nConfiguration for Berkeley Packet Filter (BPF).\nConfigurator for general target settings.\nConfiguration for MIPS architecture.\nConfiguration for PowerPC architecture.\nConfiguration for RISC-V architecture.\nConfiguration for SPARC architecture.\nConfiguration for SystemZ (IBM Z/Mainframe) architecture.\nDefines the behavior for target-specific configurations.\nConfiguration for WebAssembly.\nConfiguration for x86 architecture.\nConfigures the LLVM environment for a specific target.\nImplements the configuration by initializing all available …\nConfigures LLVM for ARM by calling general configuration …\nConfigures LLVM to generate code for x86 processors by …\nConfigures LLVM to generate code for MIPS processors.\nActivates all RISC-V related LLVM initialization functions.\nPrepares LLVM to generate WebAssembly code.\nInitializes all components for PowerPC code generation in …\nConfigures LLVM to support SPARC architecture.\nSets up LLVM to support SystemZ architecture effectively.\nInitializes all necessary AArch64 components in LLVM.\nConfigures LLVM for AMDGPU targets, including assembly …\nSets up necessary BPF components in LLVM for compiling to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")