searchState.loadedDescShard("slog", 0, "Slog -  Structured, extensible, composable logging for Rust\nBorrowed <code>KV</code>\nCritical\nLog critical level only\nDebug\nLog only debug level and above\n<code>Drain</code> discarding everything\nLogging drain\nError returned by drain\n<code>Drain</code> duplicating records into two other <code>Drain</code>s\nContains the error value\nType of potential errors that can be returned by this <code>Drain</code>\nSerialization Error\nError\nLog only error level and above\nA wrapper struct for serializing errors\n<code>Drain</code> filtering records\nFunction that can be used in <code>Filter</code> drain\nLogging filtering level\n<code>fmt::Error</code>\nExplicit lazy-closure <code>Value</code>\n<code>Drain</code> panicking on error\n<code>Drain</code> ignoring result\nInfo\nLog only info level and above\n<code>io::Error</code> (not available in ![no_std] mode)\nKey-value pair(s) for log events\nKey type\nOfficial capitalized logging (and logging filtering) level …\nOfficial capitalized logging (and logging filtering) short …\nLogging level associated with a logging <code>Record</code>\n<code>Drain</code> filtering records by <code>Record</code> logging level\nLogging handle used to execute logging statements\nFunction that can be used in <code>MapErr</code> drain\n<code>Drain</code> mapping error returned by another <code>Drain</code>\nError acquiring mutex\nError returned by <code>Mutex&lt;D : Drain&gt;</code>\nLog nothing\nContains the success value\nType returned by this drain\nOther error\nOwned KV\nChain of <code>SyncMultiSerialize</code>-s of a <code>Logger</code> and its ancestors\nCompatibility name to ease upgrading from <code>slog v1</code>\nOld name of <code>PushFnValueSerializer</code>\nLazy <code>Value</code> that writes to Serializer\nHandle passed to <code>PushFnValue</code> closure\nCompatibility name to ease upgrading from <code>slog v1</code>\nOne logging record\nInformation that can be static in the given record thus …\nSerialization <code>Result</code>\n<code>Drain + Send + RefUnwindSafe</code> bound\n<code>Drain + Send + Sync + RefUnwindSafe</code> bound\nThis type is used to enforce <code>KV</code>s stored in <code>Logger</code>s are …\n<code>Send + Sync + UnwindSafe</code> bound\n<code>Drain + Send + Sync + UnwindSafe</code> bound\nCompatibility name to ease upgrading from <code>slog v1</code>\nSerializer\nSingle pair <code>Key</code> and <code>Value</code>\nTrace\nLog everything\nValue that can be serialized\nCompatibility name to ease upgrading from <code>slog v1</code>\nWarning\nLog only warning level and above\nCheck if message with given level should be logged\nConvert to <code>str</code> from <code>LOG_LEVEL_SHORT_NAMES</code>\nConvert to <code>str</code> from <code>LOG_LEVEL_SHORT_NAMES</code>\nConvert to <code>str</code> from <code>LOG_LEVEL_NAMES</code>\nConvert to <code>str</code> from <code>LOG_LEVEL_NAMES</code>\nCast <code>Level</code> to ordering integer\nConvert to <code>usize</code> value\nMacro for building group of key-value pairs in <code>BorrowedKV</code>\nGet error column\nLog critical level record\nLog debug level record\nEmit a value\nEmit <code>fmt::Arguments</code>\nEmit <code>bool</code>\nEmit <code>char</code>\nEmit a type implementing <code>std::error::Error</code>\nEmit <code>f32</code>\nEmit <code>f64</code>\nEmit <code>i128</code>\nEmit <code>i16</code>\nEmit <code>i32</code>\nEmit <code>i64</code>\nEmit <code>i8</code>\nEmit <code>isize</code>\nEmit <code>None</code>\nEmit <code>&amp;str</code>\nEmit <code>u128</code>\nEmit <code>u16</code>\nEmit <code>u32</code>\nEmit <code>u64</code>\nEmit <code>u8</code>\nEmit <code>()</code>\nEmit <code>usize</code>\nLog error level record\nGet file path\nFilter logging records passed to <code>Drain</code>\nFilter logging records passed to <code>Drain</code> (by level)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a <code>Level</code> from an <code>usize</code>\nGet a <code>FilterLevel</code> from an <code>usize</code>\nGet function (placeholder)\nMake <code>Self</code> panic when returning any errors\nIgnore results returned by this drain\nLog info level record\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert to default, “erased” type: …\nReturns true if <code>self</code> is at least <code>level</code> logging level\n<strong>Avoid</strong>: See <code>is_enabled</code>\n<strong>Avoid</strong>: See <code>is_enabled</code>\n<strong>Avoid</strong>: Check if messages at the specified log level are …\n<strong>Avoid</strong>: See <code>is_enabled</code>\n<strong>Avoid</strong>: See <code>is_enabled</code>\n<strong>Avoid</strong>: See <code>is_enabled</code>\n<strong>Avoid</strong>: See <code>is_enabled</code>\nGet key-value pairs\nMacro for build <code>KV</code> implementing type\nGet record logging level\nGet line number\nGet list of key-value pairs assigned to this <code>Logger</code>\nGet line number\nHandle one logging statement (<code>Record</code>)\nLog one logging <code>Record</code>\nLog message a logging record\nPass <code>Drain</code> through a closure, eg. to wrap into another …\nMap logging errors returned by this drain\nMaximum logging level (log everything)\nMinimum logging level (log nothing)\nGet module\nGet a log record message\nCreate <code>Filter</code> wrapping given <code>drain</code>\nCreate a new <code>Record</code>\nBuild a child logger\nCreate <code>Filter</code> wrapping given <code>drain</code>\nCreate <code>LevelFilter</code>\nCreate <code>Duplicate</code>\nCreate <code>Fuse</code> wrapping given <code>drain</code>\nCreate <code>IgnoreResult</code> wrapping <code>drain</code>\nMacro for building group of key-value pairs: <code>OwnedKV</code>\nCreate <code>Record</code> at the given code location\nCreate <code>RecordStatic</code> at the given code location\nBuild a root <code>Logger</code>\nBuild a root <code>Logger</code> that retains <code>drain</code> type\nCompatibility name to ease upgrading from <code>slog v1</code>\nSerialize self into <code>Serializer</code>\nSerialize self into <code>Serializer</code>\nEmit a value\nAlias of <code>b</code>\nLog critical level record (alias)\nLog debug level record (alias)\nLog error level record\nLog info level record (alias)\nAlias of <code>kv</code>\nLog message a logging record (alias)\nMacro for building group of key-value pairs (alias)\nCreate <code>Record</code> at the given code location (alias)\nCreate <code>RecordStatic</code> at the given code location (alias)\nLog trace level record (alias)\nLog warning level record (alias)\nGet tag\nCreate a copy with “erased” type\nLog trace level record\nLog warning level record")