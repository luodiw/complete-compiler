searchState.loadedDescShard("sts", 0, "Symbol Table Stack Module\nDefinitions of the symbol table stack structure and core …\nAn enum’s value (variants)\nA function’s value (params, return type)\nNo expression\nA struct’s value (fields)\nInformation on a symbol in a symboltable.\nInitialized values in a scope.\nA stack of symbol tables, used to represent different …\nTypes of symbol values in a symbol table.\nAdds a new symbol and its <code>SymbolInfo</code> to the table.\nAdds an element to the symbol table at the specified index …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDrives the symbol table stack generation process.\nRetrieves a value from the symbol table.\nReturns a clone of this <code>SymbolInfo</code>’s data type\nReturns the <code>SymbolTable</code> in the symbol table stack at a …\nRetreives a reference to all tables in the stack.\nReturns a clone of this <code>SymbolInfo</code>’s value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the symbol table is empty\nCreates a new <code>SymbolTable</code> instance.\nCreates a new <code>SymbolInfo</code> instance with the given input …\nCreates a new <code>SymbolTableStack</code> instance.\nPushes a new table onto the stack.\nRetrieves the size of the stack.\nProcesses block expressions from an AST by pushing a new …\nProcesses function declarations from an AST and pushes …\nProcesses for loop declarations from an AST and pushes a …\nProcesses an initialization node in the symbol table stack.\nRoutes the generation of the SymbolTableStack based on the …\nFields of the struct\nParameters of the function\nVariants of the enum")