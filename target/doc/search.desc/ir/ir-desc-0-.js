searchState.loadedDescShard("ir", 0, "Intermediate Representation (IR) Module\nCore of the LLVM IR generation process. The driver for the …\nStores branch targets to be used in IR generation\nHolds a tag to break to, and a tag to continue to\nA struct for generating LLVM Intermediate Representation …\nadds an allocation tag to the current store table\nDecrements the stack pointer.\nDeletes the current table in the store\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates LLVM IR for an assignment\nGenerates LLVM IR for a block expression.\nGenerates LLVM IR for a break statement.\nGenerates LLVM IR for a continue statement.\nGenerates an LLVM type tag for a data type.\nGenerates LLVM IR for a do while loop.\nGenerates LLVM IR for a function declaration.\nGenerates LLVM IR for a for loop.\nGenerates LLVM IR for an if statement.\nGenerates LLVM IR for an initialization\nGenerates LLVM IR from a given module by processing its …\nGenerates LLVM IR for a literal.\nGenerates LLVM IR for a return statement.\nGenerates LLVM IR for recalling a variable\nGenerates LLVM IR for a while loop.\nRetrieves the current break and potentially the current …\nReturns the builder used for constructing IR statements.\nGets the current IR generation’s context, so that a …\nRetrieves the current basic block the builder is pointing …\nRetrieves the current block to insert after\nRetrieves the current function being built.\nReturns the current module being generated.\nGets and increments the next ID number as a string for …\nReturns a protected reference to the resource pools.\nRetrieves a clone of the current symbol table stack.\nRetrieves the current position of the stack pointer within …\nIncrements the stack pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRoutes the generation of LLVM IR based on the type of AST …\nMakes a new current table in the store\nCreates a new <code>IRGenerator</code> instance.\nPops current break continue target off the stack\nPushes a tag for break; and a tag for continue; on the …\nPushes only a tag for break; on the target stack.\nResets the stack pointer to zero.\nSearches the store table for a variable with a name\nSets the current block to insert after\nSets the current function being built.\nSets the current symbol table stack to a new STS.")