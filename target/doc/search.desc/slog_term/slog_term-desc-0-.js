searchState.loadedDescShard("slog_term", 0, "<code>slog-rs</code>’s <code>Drain</code> for terminal output\nCompact terminal-output formatting <code>Drain</code>\nStreamer builder\nThe Compact format serializer\nWrapper for <code>Write</code> types that counts total bytes written.\nOutput decorator\nTerminal-output formatting <code>Drain</code>\nStreamer builder\nPlain (no-op) <code>Decorator</code> implementation\nRecord decorator used by <code>PlainDecorator</code>\nPlainSync <code>Decorator</code> implementation\n<code>RecordDecorator</code> used by <code>PlainSyncDecorator</code>\nPer-record decorator\nSerializer for the lines\n<code>Decorator</code> implemented using <code>term</code> crate\n<code>TermDecorator</code> builder\nRecord decorator used by <code>TermDecorator</code>\nReplacement for <code>std::io::stdout()</code> for when output …\nThreadsafe header formatting function type\nThreadsafe timestamp formatting function type\nBuild <code>FullFormat</code>\nBuild the streamer\nBuild <code>TermDecorator</code>\nReturns the count of the total bytes written.\nWrite out all the whole stack\nWrite out all the whole stack\nForce colored output\nForce plain output\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>Level</code> color\nNew <code>TermBuilder</code>\nNew <code>CompactFormatBuilder</code>\nCreate <code>Serializer</code> instance\nCreate <code>CompactFormatSerializer</code> instance\nCreate <code>CountingWriter</code> instance\nCreate <code>PlainDecorator</code> instance\nCreate <code>PlainSyncDecorator</code> instance\nStart building <code>TermDecorator</code>\nReturns <code>true</code> if message was not empty\nReset formatting to defaults\nFormat a comma between key-value pairs\nFormat key\nFormat <code>Record</code> level\nFormat a file location\nFormat <code>Record</code> message\nFormat value\nFormat timestamp\nFormat a value\nFormat normal text\nOutput to <code>stderr</code>\nOutput to <code>stdout</code>\nCreate a <code>CompactFormat</code> drain with default settings\nCreate a <code>FullFormat</code> drain with default settings\nDefault local timezone timestamp function\nDefault UTC timestamp function\nTry to build <code>TermDecorator</code>\nProvide a function that print the header\nProvide a function that print the header\nProvide a custom function to generate the timestamp\nProvide a custom function to generate the timestamp\nEnable the file location in log in this format […\nUse the local time zone for the timestamp (default)\nUse the local time zone for the timestamp (default)\nUse the original ordering of key-value pairs\nUse the UTC time zone for the timestamp\nUse the UTC time zone for the timestamp\nGet a <code>RecordDecorator</code> for a given <code>record</code>")